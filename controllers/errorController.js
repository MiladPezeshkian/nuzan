const AppError = require("../utils/AppError");

// Ø®Ø·Ø§ÛŒ CastError (Ù…Ø«Ù„Ø§Ù‹ ObjectId Ù†Ø§Ù…Ø¹ØªØ¨Ø±)
const handleCastErrorDB = (err) => {
  const message = `Invalid ${err.path}: ${err.value}.`;
  return new AppError(message, 400);
};

// Ø®Ø·Ø§ÛŒ ValidationError Ø§Ø² Mongoose
const handleValidationErrorDB = (err) => {
  const errors = Object.values(err.errors).map((el) => el.message);
  const message = `Invalid input data: ${errors.join(". ")}`;
  return new AppError(message, 400);
};

// ØªÙˆÚ©Ù† JWT Ù†Ø§Ù…Ø¹ØªØ¨Ø±
const handleJWTError = () =>
  new AppError("Invalid token. Please log in again.", 401);

// ØªÙˆÚ©Ù† JWT Ù…Ù†Ù‚Ø¶ÛŒ Ø´Ø¯Ù‡
const handleJWTExpiredError = () =>
  new AppError("Your token has expired. Please log in again.", 401);

// Ø§Ø±Ø³Ø§Ù„ Ø¬Ø²Ø¦ÛŒØ§Øª Ú©Ø§Ù…Ù„ Ø¯Ø± Ø­Ø§Ù„Øª ØªÙˆØ³Ø¹Ù‡
const sendErrorDev = (err, res) => {
  res.status(err.statusCode).json({
    status: err.status,
    error: err,
    message: err.message,
    stack: err.stack,
  });
};

// Ø§Ø±Ø³Ø§Ù„ Ù¾ÛŒØ§Ù… Ø­Ø¯Ø§Ù‚Ù„ÛŒ Ø¯Ø± Ø­Ø§Ù„Øª ØªÙˆÙ„ÛŒØ¯
const sendErrorProd = (err, res) => {
  if (err.isOperational) {
    // Ø®Ø·Ø§Ù‡Ø§ÛŒ Ø¹Ù…Ù„ÛŒØ§ØªÛŒ (Ø§Ø¹Ù…Ø§Ù„ Ø´Ø¯Ù‡ Ø¨Ø§ AppError)
    res.status(err.statusCode).json({
      status: err.status,
      message: err.message,
    });
  } else {
    // Ø®Ø·Ø§Ù‡Ø§ÛŒ Ù†Ø§Ø´Ù†Ø§Ø®ØªÙ‡
    console.error("ERROR ðŸ’¥", err);
    res.status(500).json({
      status: "error",
      message: "Something went wrong! Please try again later.",
    });
  }
};

const globalErrorHandler = (err, req, res, next) => {
  err.statusCode = err.statusCode || 500;
  err.status = err.status || "error";

  if (process.env.NODE_ENV === "development") {
    sendErrorDev(err, res);
  } else {
    let error = { ...err };
    error.message = err.message;

    if (error.name === "CastError") error = handleCastErrorDB(error);
    if (error.name === "ValidationError")
      error = handleValidationErrorDB(error);
    if (error.name === "JsonWebTokenError") error = handleJWTError();
    if (error.name === "TokenExpiredError") error = handleJWTExpiredError();

    sendErrorProd(error, res);
  }
};

module.exports = globalErrorHandler;
